const express = require('express');
const cors = require('cors');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// Middleware
app.use(cors());
app.use(express.json());
// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤, –æ–±–Ω–æ–≤–∏—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
app.use(cors({
    origin: function(origin, callback) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –≤ development
        if (process.env.NODE_ENV !== 'production') {
            callback(null, true);
        } else {
            // –í production –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å origins
            callback(null, true);
        }
    },
    credentials: true
}));

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–∏–º–∏—Ç–∞—Ü–∏—è Firebase Realtime Database)
class SimpleDatabase {
    constructor() {
        this.data = {
            users: {},
            transactions: []
        };
        this.listeners = {};
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏
    get(path) {
        const keys = path.split('/').filter(k => k);
        let current = this.data;
        
        for (const key of keys) {
            if (current && typeof current === 'object') {
                current = current[key];
            } else {
                return null;
            }
        }
        
        return current;
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏
    set(path, value) {
        const keys = path.split('/').filter(k => k);
        let current = this.data;
        
        for (let i = 0; i < keys.length - 1; i++) {
            const key = keys[i];
            if (!current[key] || typeof current[key] !== 'object') {
                current[key] = {};
            }
            current = current[key];
        }
        
        const lastKey = keys[keys.length - 1];
        const oldValue = current[lastKey];
        current[lastKey] = value;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.notifyListeners(path, value, oldValue);
        
        return true;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (merge)
    update(path, updates) {
        const keys = path.split('/').filter(k => k);
        let current = this.data;
        
        for (const key of keys) {
            if (!current[key] || typeof current[key] !== 'object') {
                current[key] = {};
            }
            current = current[key];
        }
        
        const oldValue = { ...current };
        Object.assign(current, updates);
        
        this.notifyListeners(path, current, oldValue);
        
        return true;
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    on(path, callback) {
        if (!this.listeners[path]) {
            this.listeners[path] = [];
        }
        this.listeners[path].push(callback);
    }
    
    // –£–±—Ä–∞—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è
    off(path, callback) {
        if (this.listeners[path]) {
            const index = this.listeners[path].indexOf(callback);
            if (index > -1) {
                this.listeners[path].splice(index, 1);
            }
        }
    }
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    notifyListeners(path, newValue, oldValue) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ—á–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        if (this.listeners[path]) {
            this.listeners[path].forEach(callback => {
                callback(newValue, oldValue, path);
            });
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        const pathParts = path.split('/').filter(k => k);
        for (let i = pathParts.length - 1; i > 0; i--) {
            const parentPath = pathParts.slice(0, i).join('/');
            if (this.listeners[parentPath]) {
                const parentData = this.get(parentPath);
                this.listeners[parentPath].forEach(callback => {
                    callback(parentData, null, parentPath);
                });
            }
        }
    }
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    transaction(path, updateFunction) {
        const currentValue = this.get(path);
        const newValue = updateFunction(currentValue);
        this.set(path, newValue);
        return newValue;
    }
}

const db = new SimpleDatabase();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
console.log('qr version');

// API Routes

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/balance/:userId', (req, res) => {
    const userId = String(req.params.userId);
    
    const user = db.get(`users/${userId}`);
    const balance = user ? user.balance || 0 : 0;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!user) {
        db.set(`users/${userId}`, {
            id: userId,
            balance: 0,
            createdAt: new Date().toISOString()
        });
    }
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userId}: ${balance} ‚ÇΩ`);
    
    res.json({
        success: true,
        balance: balance,
        userId: userId
    });
});

// –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
app.post('/api/topup', (req, res) => {
    const { userId, amount } = req.body;
    
    if (!userId || !amount || amount < 100 || amount > 5000) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const currentUser = db.get(`users/${userId}`) || { balance: 0 };
    const newBalance = (currentUser.balance || 0) + amount;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update(`users/${userId}`, {
        id: userId,
        balance: newBalance,
        lastTopup: new Date().toISOString()
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = {
        id: 'tx_' + Date.now() + '_' + Math.random().toString(36).substr(2, 5),
        userId: userId,
        type: 'topup',
        amount: amount,
        timestamp: new Date().toISOString(),
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount} ‚ÇΩ`
    };
    
    const transactions = db.get('transactions') || [];
    transactions.push(transaction);
    db.set('transactions', transactions);
    
    console.log(`üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è ${userId}: +${amount} ‚ÇΩ (–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} ‚ÇΩ)`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket
    io.emit('balance_updated', {
        userId: userId,
        balance: newBalance,
        transaction: transaction
    });
    
    res.json({
        success: true,
        balance: newBalance,
        transaction: transaction
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/api/transactions/:userId', (req, res) => {
    const { userId } = req.params;
    const limit = parseInt(req.query.limit) || 20;
    
    const allTransactions = db.get('transactions') || [];
    const userTransactions = allTransactions
        .filter(tx => tx.userId === userId)
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, limit);
    
    res.json({
        success: true,
        transactions: userTransactions
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/api/status', (req, res) => {
    const usersCount = Object.keys(db.get('users') || {}).length;
    const transactionsCount = (db.get('transactions') || []).length;
    
    res.json({
        status: 'running',
        uptime: process.uptime(),
        users: usersCount,
        transactions: transactionsCount,
        timestamp: new Date().toISOString()
    });
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users/online', (req, res) => {
    try {
        const onlineUsers = [];
        const sockets = io.sockets.sockets;
        
        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersMap = new Map();
        
        sockets.forEach(socket => {
            if (socket.userId) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId –µ—Å—Ç—å
                usersMap.set(socket.userId, {
                    userId: socket.userId,
                    lastSeen: new Date().toISOString()
                });
            }
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤
        const uniqueUsers = Array.from(usersMap.values());
        
        console.log(`üë• –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        res.json({
            success: true,
            count: uniqueUsers.length,
            users: uniqueUsers
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
app.post('/api/transfer', (req, res) => {
    const { fromUserId, toUserId, amount, description = '' } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!fromUserId || !toUserId || !amount) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
        });
    }
    
    if (fromUserId === toUserId) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ'
        });
    }
    
    if (amount < 100 || amount > 5000) {
        return res.status(400).json({
            success: false,
            error: '–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 5000 ‚ÇΩ'
        });
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const fromUser = db.get(`users/${fromUserId}`) || { balance: 0 };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (fromUser.balance < amount) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        let toUser = db.get(`users/${toUserId}`);
        if (!toUser) {
            db.set(`users/${toUserId}`, {
                id: toUserId,
                balance: 0,
                createdAt: new Date().toISOString()
            });
            toUser = db.get(`users/${toUserId}`);
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.transaction('users', (users) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            users[fromUserId] = {
                ...users[fromUserId],
                balance: users[fromUserId].balance - amount
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            users[toUserId] = {
                ...users[toUserId],
                balance: (users[toUserId]?.balance || 0) + amount
            };
            
            return users;
        });
        
    const transactions = db.get('transactions') || [];
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Å–ø–∏—Å–∞–Ω–∏–µ)
    const outTransaction = {
        id: 'tx_' + Date.now() + '_out_' + Math.random().toString(36).substr(2, 5),
        userId: fromUserId,
        relatedUserId: toUserId,
        type: 'transfer_out',
        amount: -amount,
        timestamp: new Date().toISOString(),
        description: description || `–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${toUserId}`
    };
    transactions.push(outTransaction);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ)
    const inTransaction = {
        id: 'tx_' + Date.now() + '_in_' + Math.random().toString(36).substr(2, 5),
        userId: toUserId,
        relatedUserId: fromUserId,
        type: 'transfer_in',
        amount: amount,
        timestamp: new Date().toISOString(),
        description: description || `–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fromUserId}`
    };
    transactions.push(inTransaction);
    
    db.set('transactions', transactions);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    const updatedFromUser = db.get(`users/${fromUserId}`);
    const updatedToUser = db.get(`users/${toUserId}`);
    
    console.log(`‚ÜîÔ∏è –ü–µ—Ä–µ–≤–æ–¥ ${fromUserId} -> ${toUserId}: ${amount} ‚ÇΩ`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    io.to(fromUserId).emit('balance_updated', {
        userId: fromUserId,
        balance: updatedFromUser.balance,
        transaction: outTransaction // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    });
    
    io.to(toUserId).emit('balance_updated', {
        userId: toUserId,
        balance: updatedToUser.balance,
        transaction: inTransaction // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    });
        
        res.json({
            success: true,
            fromUserId: fromUserId,
            toUserId: toUserId,
            amount: amount,
            newBalanceFrom: updatedFromUser.balance,
            newBalanceTo: updatedToUser.balance
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞'
        });
    }
});

app.post('/api/payment', (req, res) => {
    // 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ—Å—Ç–∞–µ–º kassaId –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { fromUserId, storeName, amount, kassaId } = req.body;

    // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º kassaId –≤ –ø—Ä–æ–≤–µ—Ä–∫—É
    if (!fromUserId || !storeName || !amount || !kassaId) {
        return res.status(400).json({ success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤–∫–ª—é—á–∞—è kassaId)' });
    }
    if (amount <= 0) {
        return res.status(400).json({ success: false, error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π' });
    }

    try {
        const fromUser = db.get(`users/${fromUserId}`);
        if (!fromUser || fromUser.balance < amount) {
            return res.status(400).json({ success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        }

        const newBalance = db.transaction(`users/${fromUserId}/balance`, (currentBalance) => {
            return (currentBalance || 0) - amount;
        });

        const transaction = {
            id: 'tx_' + Date.now() + '_qr_' + Math.random().toString(36).substr(2, 5),
            userId: fromUserId,
            type: 'qr_payment',
            amount: -amount,
            timestamp: new Date().toISOString(),
            description: `–û–ø–ª–∞—Ç–∞ –≤ "${storeName}" (–ö–∞—Å—Å–∞: ${kassaId})`
        };
        const transactions = db.get('transactions') || [];
        transactions.push(transaction);
        db.set('transactions', transactions);

        console.log(`üî≥ QR-–æ–ø–ª–∞—Ç–∞ –æ—Ç ${fromUserId} –≤ "${storeName}": ${amount} ‚ÇΩ`);

        // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è kassaId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–¥–µ—Å—å –≤—Å—ë —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Å—Å—É —Å ID: ${kassaId}`);
        io.to(kassaId).emit('payment_successful', { 
            status: 'ok',
            amount: amount,
            userId: fromUserId,
            transactionId: transaction.id 
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏ —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        io.to(fromUserId).emit('balance_updated', {
            userId: fromUserId,
            balance: newBalance,
            transaction: transaction
        });

        // –û—Ç–≤–µ—á–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        res.json({
            success: true,
            newBalance: newBalance,
            transaction: transaction
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ QR-–æ–ø–ª–∞—Ç–µ:', error);
        res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
    console.log(`üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
    
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –∫–∞—Å—Å–æ–π, –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    socket.on('join', (id) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º id –≤ –æ–±—ä–µ–∫—Ç–µ —Å–æ–∫–µ—Ç–∞
        socket.userId = id;
        socket.join(id); // <--- –ö–õ–Æ–ß–ï–í–ê–Ø –ö–û–ú–ê–ù–î–ê
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–∞—Å—Å–∞ —Å ID [${id}] –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –±–∞–ª–∞–Ω—Å
        const user = db.get(`users/${id}`);
        if (user) {
            socket.emit('balance_updated', {
                userId: id,
                balance: user.balance || 0
            });
        }
    });
	
    socket.on('disconnect', () => {
        console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
    });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è Firebase Realtime Database)
db.on('users', (userData) => {
    console.log('üì° –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', Object.keys(userData || {}).length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
});

db.on('transactions', (transactions) => {
    console.log('üì° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', (transactions || []).length, '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(err.status || 500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use((req, res, next) => {
    res.status(404).json({
        success: false,
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

const PORT = process.env.PORT || 3001;

// –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
function getLocalIP() {
    const interfaces = require('os').networkInterfaces();
    for (const interfaceName in interfaces) {
        for (const iface of interfaces[interfaceName]) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –Ω–µ-IPv4 –∞–¥—Ä–µ—Å–∞
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

const LOCAL_IP = getLocalIP();

server.listen(PORT, '0.0.0.0', () => {
    console.log('');
    console.log('üè¶ ================================');
    console.log('üè¶ –°–ë–ï–†BANK API –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù');
    console.log('üè¶ ================================');
    console.log(`üåç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:${PORT}`);
    console.log(`üåê –°–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å: http://${LOCAL_IP}:${PORT}`);
    console.log(`üì° API: http://${LOCAL_IP}:${PORT}/api`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: http://${LOCAL_IP}:${PORT}/api/status`);
    console.log('üîå WebSocket: –∞–∫—Ç–∏–≤–µ–Ω');
    console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –≤ –ø–∞–º—è—Ç–∏ (SimpleDB)');
    console.log('üè¶ ================================');
    console.log('');
});


// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});


